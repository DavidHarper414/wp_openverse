version: "2.4"

include:
  - "catalog/compose.yml"
  - "api/compose.yml"

services:
  # Database used by the API
  db:
    profiles:
      - ingestion_server
      - api
    image: docker.io/postgres:13.10-alpine
    ports:
      - "50254:5432"
    volumes:
      - api-postgres:/var/lib/postgresql/data
    env_file:
      - docker/db/env.docker
    healthcheck:
      test: "pg_isready -U deploy -d openledger"

  # Database used by the catalog
  upstream_db:
    profiles:
      - catalog
      - catalog_dependencies
      - ingestion_server
      - api
    build:
      context: ./docker/upstream_db/
      target: db
      args: # Automatically inferred from env vars, unless specified
        - PGCLI_VERSION
    image: openverse-upstream_db
    ports:
      - "50255:5432"
    volumes:
      - catalog-postgres:/var/lib/postgresql/data
      - ./sample_data:/sample_data:z
    env_file:
      - docker/upstream_db/env.docker
    healthcheck:
      test: "pg_isready -U deploy -d openledger"

  s3:
    profiles:
      - catalog_dependencies
      - catalog
    image: docker.io/minio/minio:latest
    ports:
      - "5010:5000"
      - "5011:5001"
    env_file:
      - .env
      - docker/minio/.env

    command: minio server /data --address :5000 --console-address :5001
    volumes:
      - minio:/data
      - ./docker/minio/s3_entrypoint.sh:/opt/minio/s3_entrypoint.sh:ro,z
    entrypoint: /opt/minio/s3_entrypoint.sh
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5010/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  load_to_s3:
    profiles:
      - catalog_dependencies
      - catalog
    image: docker.io/minio/mc:latest
    env_file:
      - .env
      - docker/minio/.env
    depends_on:
      - s3
    volumes:
      # Buckets for testing provider data imported from s3 are subdirectories under
      # /tests/s3-data/
      - ./catalog/tests/s3-data:/data:rw,z
      - ./docker/minio/load_to_s3_entrypoint.sh:/opt/minio/load_to_s3_entrypoint.sh:ro,z
    entrypoint: /opt/minio/load_to_s3_entrypoint.sh

  plausible_db:
    profiles:
      - frontend
    image: docker.io/postgres:13.10-alpine
    expose:
      - "5432"
    volumes:
      - plausible-postgres:/var/lib/postgresql/data
    env_file:
      - ./docker/plausible_db/env.docker
    healthcheck:
      test: "pg_isready -U deploy -d plausible"

  plausible_ch:
    profiles:
      - frontend
    image: docker.io/clickhouse/clickhouse-server:23.4-alpine
    volumes:
      - plausible-clickhouse:/var/lib/clickhouse
      - ./docker/clickhouse/clickhouse-config.xml:/etc/clickhouse-server/config.d/logging.xml:ro,z
      - ./docker/clickhouse/clickhouse-user-config.xml:/etc/clickhouse-server/users.d/logging.xml:ro,z
    ulimits:
      nofile:
        soft: 262144
        hard: 262144

  plausible:
    profiles:
      - frontend
    image: plausible/analytics:latest
    ports:
      - "50288:8000"
    command: sh -c "sleep 10 && /entrypoint.sh db createdb && /entrypoint.sh db migrate && /entrypoint.sh run"
    depends_on:
      - plausible_db
      - plausible_ch
    env_file:
      - docker/plausible/env.docker

  es:
    profiles:
      - ingestion_server
      - api
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.2
    ports:
      - "50292:9200"
    env_file:
      - docker/es/env.docker
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -si -XGET 'localhost:9200/_cluster/health?pretty' | grep -qE 'yellow|green'",
        ]
      interval: 10s
      timeout: 60s
      retries: 10
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - es-data:/usr/share/elasticsearch/data

  ingestion_server:
    profiles:
      - ingestion_server
      - api
    build:
      context: ./ingestion_server/
      target: ing
      args: # Automatically inferred from env vars, unless specified
        - INGESTION_PY_VERSION
    image: openverse-ingestion_server
    ports:
      - "50281:8001"
    depends_on:
      - db
      - upstream_db
      - es
      - indexer_worker
    volumes:
      - ./ingestion_server:/ingestion_server:z
    env_file:
      - ingestion_server/env.docker
      - ingestion_server/.env
    stdin_open: true
    tty: true

  indexer_worker:
    profiles:
      - ingestion_server
      - api
    build:
      context: ./ingestion_server/
      target: ing
      args: # Automatically inferred from env vars, unless specified
        - INGESTION_PY_VERSION
    image: openverse-ingestion_server
    command: gunicorn indexer_worker:api --bind 0.0.0.0:8002
    expose:
      - "8002"
    depends_on:
      - db
      - upstream_db
      - es
    volumes:
      - ./ingestion_server:/ingestion_server:z
    env_file:
      - ingestion_server/env.docker
    stdin_open: true
    tty: true

  frontend_nginx:
    profiles:
      - frontend
    build:
      context: ./frontend/
      dockerfile: Dockerfile.nginx
      target: nginx
      args: # Automatically inferred from env vars, unless specified
        - SEMANTIC_VERSION=${SEMANTIC_VERSION:-v1.0.0}
        - FRONTEND_NODE_VERSION
        - FRONTEND_PNPM_VERSION
    ports:
      - "50290:8080"
    environment:
      OPENVERSE_NGINX_UPSTREAM_URL: ${HOST_NETWORK_ADDRESS:-172.17.0.1}:8443
      OPENVERSE_NGINX_PLAUSIBLE_EVENT_URL: http://plausible:8000/api/event
      # Set to Docker network resolver to be able to resolve the `plausible` container.
      # This would be the default but Nginx requires it to be explicitly set when
      # making outgoing requests (e.g., to plausible.io)
      OPENVERSE_NGINX_DNS_RESOLVER: 127.0.0.11

volumes:
  api-postgres:
  catalog-postgres:
  plausible-postgres:
  plausible-clickhouse:
  es-data:
  minio:
