name: Release app

on:
  workflow_call:
    # Purely for testing
    inputs:
      app:
        description: App (testing)
        type: string
      image-sha:
        description: Image sha (testing)
        type: string
  workflow_dispatch:
    inputs:
      app:
        type: choice
        options:
          - api
          - ingestion_server
          - frontend
        required: true
        description: Application to release. If `api` or `frontend`, the deployment workflow will automatically be dispatched for you.
      image-sha:
        type: string
        required: true
        description: The SHA of the staging image to tag.

concurrency: ${{ github.workflow }}-${{ inputs.app }}

jobs:
  release-app:
    name: Release app
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Validate `sha-tag` input
        uses: actions/github-script@v6
        with:
          script: |
            let exists = undefined,
              page = 0
            while (!exists) {
              page += 1
              const { data: versions } =
                await github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg({
                  package_type: 'container',
                  // We do not have to validate that auxiliary images also exist as they're built at the same time
                  // as the "main" image. e.g., `api_nginx` is always built when `api` is built and they'll have
                  // the same set of tags.
                  package_name: 'openverse-${{ inputs.app }}',
                  org: 'WordPress',
                  page,
                  // max of `per_page`
                  per_page: 100,
                })
              if (!versions.length) {
                break
              }
              exists = versions.some((v) => v.metadata.container.tags.includes('${{ inputs.image-sha }}'))
            }
            if (!exists) {
              throw new Error(
                `'${{ inputs.image-sha }}' does not appear to be a valid SHA tag for ${{ inputs.app }}.`
              )
            }

      - name: Calculate tag name
        id: tag
        run: |
          # Format example: 2023.03.22.04.56.29
          # `-u` forces UTC
          formatted_date="$(date -u +%Y.%m.%d.%H.%M.%S)"

          # Split image and git tag to avoid app name duplicated in the fully qualified image name
          {
            echo "date=$formatted_date";
            echo "git-tag=${{ inputs.app }}-$formatted_date";
            echo "image-tag=workflow-test____rel-$formatted_date";
          } >> "$GITHUB_OUTPUT"

      - name: Add git tag
        run: |
          git tag -a ${{ steps.tag.outputs.git-tag }} ${{ inputs.image-sha }}
          git push origin ${{ steps.tag.outputs.git-tag }}

      - name: Log in to GitHub Docker Registry
        uses: docker/login-action@v2
        with:
          registry: https://ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Add new tag to existing docker image
        run: |
          docker buildx imagetools create ghrc.io/wordpress/openverse-${{ inputs.app }}:${{ inputs.image-sha }} --tag ghrc.io/wordpress/openverse-${{ inputs.app }}:${{ steps.tag.outputs.image-tag }}

          if [ "${{ inputs.app}}" = "api" ]; then
            docker buildx imagetools create ghrc.io/wordpress/openverse-api_nginx:${{ inputs.image-sha }} --tag ghrc.io/wordpress/openverse-api_nginx:${{ steps.tag.outputs.image-tag }}
          fi

      - name: Update draft release
        # We don't actually ever use these releases, but because there's no easier
        # way to generate the release notes for an application than this action,
        # and because the action doesn't support generating the notes without
        # adding them to a release (draft or no), we still let the release get created
        # and then just copy the body from the result of this action.
        uses: release-drafter/release-drafter@v5
        id: release-drafter
        with:
          config-name: release-drafter-${{ inputs.app }}.yml
          version: ${{ steps.tag.outputs.date }}
          tag: ${{ steps.tag.outputs.git-tag }}
          tag-prefix: ${{ inputs.app }}-
          publish: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Add new changelog file to documentation
        run: |
          cat << EOF > documentation/changelogs/${{ inputs.app }}/${{ steps.tag.outputs.date }}.md
          # ${{ steps.tag.outputs.date }}
          ${{ steps.release-drafter.outputs.body }}
          EOF

      - name: Open changelog PR
        uses: peter-evans/create-pull-request@v4
        with:
          commit-message: "[skip ci] Publish changelog for ${{ steps.tag.outputs.git-tag }}"
          body: |
            This changelog PR was automatically generated for @${{ github.actor }} as a result of the ${{ github.workflow }} workflow.

      # - name: Deploy production api
      #   if: inputs.app == 'api'
      #   uses: ./.github/workflows/deploy-production-api.yml
      #   with:
      #     tag: ${{ steps.tag.outputs.image-tag }}

      # - name: Deploy production frontend
      #   if: inputs.app == 'frontend'
      #   uses: ./.github/workflows/deploy-production-nuxt.yml
      #   with:
      #     tag: ${{ steps.tag.outputs.image-tag }}
