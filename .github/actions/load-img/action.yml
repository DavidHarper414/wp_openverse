name: openverse/load-img
description: Download and import Docker images from artifacts

inputs:
  run_id:
    description: The ID of the current workflow run
    required: true

  setup_images:
    description: Space-separated list of image names
    required: true
    # See `set_matrix_images.py` for all possible values

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup `pnpm`
      uses: ./.github/actions/setup-env
      with:
        # We just need to be able to use `pnpm`. `npm` will fail on
        # any `workspace:*` dependency which we have in the root `package.json`
        setup_python: false
        install_recipe: ""

    - name: Install `@actions/artifact`
      shell: bash
      run: |
        pnpm install @actions/artifact -w

    - name: Download images
      uses: actions/github-script@v7
      with:
        script: |
          const { DefaultArtifactClient } = require('@actions/artifact')
          const artifact = new DefaultArtifactClient()
          const images = '${{ inputs.setup_images }}'.split(' ')
          const [repositoryOwner, repositoryName] = '${{ github.repository }}'.split('/')
          const findBy = {
            repositoryOwner,
            repositoryName,
            workflowRunId: '${{ inputs.run_id }}',
            token: '${{ github.token }}',
          }
          const workflowArtifacts = await artifact.listArtifacts({ findBy })
          await Promise.all(
            workflowArtifacts.artifacts
              .filter((item) => images.includes(item.name))
              .map((item) => artifact.downloadArtifact(item.id, { findBy, path: '/tmp' }))
          )
          console.log('Downloaded artifacts')

    - name: Load images
      shell: bash
      run: |
        images=(${{ inputs.setup_images }})
        for image in "${images[@]}"; do
          if [[ "$image" == *"="* ]]; then
            key="${image%%=*}"
            value="${image##*=}"
            echo "Loading /tmp/${value}.tar."
            docker image load --input /tmp/${value}.tar
            echo "Tagging openverse-${value} as openverse-${key}."
            docker image tag openverse-${value} openverse-${key}
          else
            echo "Loading /tmp/${image}.tar."
            docker image load --input /tmp/${image}.tar
          fi
        done
